yo mate !! how are you??

< Makefile cat | wc -l | head -77 | tail -5 | ls -l >> out_file
< Makefile cat | head -7 | taili -5 >> out_file
< Makefile cat | wc -l > out_file
< Makefile cat | head -42 | echo hello world  > out_file

<Makefile << fin <src/main.c head -15 | echo hello 15 >out_file >> files/out_file

< files/no_right << files/write_o < files/all_rights ls -l >files/read_o >>files/read_write >files/exec_o.c 

echo Hello world
echo "Hello world"

to do list :
	→ handle { } in parser
	→ check if all grammar is ok in lexer/parser/tokener 
	→ expansion of $ 
	→ $? print the exit status of the last command executed (ret)
	→ gérer les redirection avant l'exec
	→ gérer les open/close de fd avant l'exec

	→ gérer avec plusieurs redirection : ls -l > out_file > out_file2 
	redirection precedence

to do expansion :
	→ cmd="ls -l" puis $cmd affiche le resultat de ls -l
	→ echo $?
	→ "$cmd" doit afficher "ls -lra: command not found"
	→ export bout="s -l" puis faire l$bout -ra : ca doit afficher le resultat de "ls -l -ra"
example / error :
	→ cmd=321 echo yes => le cmd=321 n'est pas pris en compte quand autre commande derriere
	→ $ < ou << ou >> ou >
	bash: syntax error near unexpected token `newline'

	→ $ e'c'"h"o salut
	salut

	→ $ echo > in Hello
	Hello dans in

	echo 1 > out12 2 3 << 1 << 2 << 3 < in < in2 >>out13

	→ $ echo 1 > out1 2 3 > /dev/stdout << 1 << 2 << 3 < in < in2
		→ ouvrir tous les heredocs
		→ /dev/stdout est ignore car il est ouvert en dernier
		→ out1 est bien cree mais il est vide
		→ in et in2 n'existent pas 
			→ erreur sur <in bash: in: No such file or directory
			→ arret du programme 
			→ echo ne s'execute pas

	→ $ echo "$"path ET echo '$'path
		ca donne => $path
	
	→ $ echo '$path'
		ca donne $path

	→ par contre $ echo "$path"
		ca donne bien la valeur de path
	
	→ $ echo $popo (popo n'existe pas)
		ca doit retourner un retour a la ligne

	→ $ echo "'$USER'"
		ca doit retourner 'jrouillo'
	
	→ JESS TO DO => regarder pourquoi le premier caractere de l'expansion ne s'affiche pas !

POUR INFO :
	→ Comme on ne doit pas gerer les guillemets ou acolades ouvertes, lorsqu'on fait
		$ echo ${PATH{  OU   echo ${PATH
			ca renvoie PATH

# 	@echo "$(RED)  __  __   _           _    _____   _              _   _ $(END)"
# 	@echo "$(RED) |  \/  | (_)         (_)  / ____| | |            | | | |$(END)"
# 	@echo "$(RED) | \  / |  _   _ __    _  | (___   | |__     ___  | | | |$(END)"
# 	@echo "$(RED) | |\/| | | | | '_ \  | |  \___ \  | '_ \   / _ \ | | | |$(END)"
# 	@echo "$(RED) | |  | | | | | | | | | |  ____) | | | | | |  __/ | | | |$(END)"
# 	@echo "$(RED) |_|  |_| |_| |_| |_| |_| |_____/  |_| |_|  \___| |_| |_|$(END)"
# 	@echo "$(RED)                                                         $(END)"

toilet -f small 'MiniShell' | boxes -d spring -a hcvc | lolcat >> out_file
toilet -f script 'MiniShell' | boxes -d spring -a hcvc | lolcat >> out_file
toilet -f circle 'MiniShell' | boxes -d spring -a hcvc | lolcat >> out_file
toilet -f future 'MiniShell' | boxes -d spring -a hcvc | lolcat >> out_file
toilet -f pagga 'MiniShell' | boxes -d spring -a hcvc | lolcat >> out_file
toilet -f smblock 'MiniShell' | boxes -d spring -a hcvc | lolcat >> out_file


toilet -f future 'MiniShell' | boxes -d parchment -a hcvc | lolcat 
toilet -f future 'MiniShell' | boxes -d parchment -a hcvc -s 60x10 | lolcat 
toilet -f future 'MiniShell' | boxes -d parchment -a hcvc -s 50x10 | lolcat 


toilet -f small 'MiniShell' | boxes -d spring -a hcvc | lolcat 
toilet -f script 'MiniShell' | boxes -d spring -a hcvc | lolcat 
toilet -f circle 'MiniShell' | boxes -d spring -a hcvc | lolcat 
toilet -f future 'MiniShell' | boxes -d spring -a hcvc | lolcat 
toilet -f pagga 'MiniShell' | boxes -d spring -a hcvc | lolcat 
toilet -f smblock 'MiniShell' | boxes -d spring -a hcvc | lolcat 


"			 ________________________________________________________   \n \
			/\                                                       \	\n \
			\_|                                                      |	\n \
			  |                ▙▗▌▗    ▗ ▞▀▖▌     ▜▜                 |	\n \
			  |                ▌▘▌▄ ▛▀▖▄ ▚▄ ▛▀▖▞▀▖▐▐                 |	\n \
			  |                ▌ ▌▐ ▌ ▌▐ ▖ ▌▌ ▌▛▀ ▐▐                 |	\n \
			  |                ▘ ▘▀▘▘ ▘▀▘▝▀ ▘ ▘▝▀▘ ▘▘                |	\n \
			  |                                                      |	\n \
			  |   ___________________________________________________|_	\n \
			   \_/_____________________________________________________/\n " | lolcat
